#!/bin/bash

# SETUP
# To create an shortcut just use the command bellow
# ln -s $(pwd)/<script_name> /usr/local/bin

# -------
# Setup properties

# Change this to the project path
# Tip: Use "pwd" command
project_path="/home/minucci/Documents/Projects/topgithuprepos"
docker_compose="docker-compose -f $project_path/docker-compose.yml"

# Change this to the name of the database volume
# Tip: Use "docker volume ls" command
volume_db_name=""


# -------

# Remove docker volume
function remove_volume() {
  echo "REMOVING postgres_data VOLUME"
  eval "docker volume rm $volume_db_name"
}

# Check if service is running or exit
function is_running() {
  if [[ $(eval "$docker_compose ps -q $1") == "" ]]; then
      echo "$1 container must be running to run this function."
      exit 0
  fi
}

# Start containers
function start() {
  echo "STARTING CONTAINERS"
  eval "$docker_compose up --build"
}

# Stop containers
function stop() {
  echo "STOPING CONTAINERS"
  eval "$docker_compose stop"
}

# Restart containers
function restart() {
  echo "RESTARTING CONTAINERS"
  stop
  start
}

# Remove containers
function remove() {
  echo "REMOVING CONTAINERS"
  eval "$docker_compose rm"
}

# Display logs
function logs() {
  if [ -z "$1" ]; then
    eval "$docker_compose logs -f --tail 50"
  else
    eval "$docker_compose logs -f --tail 50 $1"
  fi
}

# Enter shell mode
function bash() {
  if [ -z "$1" ]; then
    eval "$docker_compose exec web bash"
  else
    eval "$docker_compose exec $1 bash"
  fi
}

# PS docker-compose
function ps() {
  eval "$docker_compose ps"
}

# Get backup file from docker volume to the host
function get_backup() {

  # Check if postgres service is running
  is_running "postgres"

  # Create destination folder
  mkdir -p "$project_path/backups"

  # Get desired backup file from postgres volume
  eval "docker cp $(eval "$docker_compose ps -q postgres"):/backups/$1 $project_path/backups/$1"

  echo "Successfully get backup from volume. Destination file is:"
  echo "$project_path/backups/$1"
}

# Put backup file from host to the docker volume
function put_backup() {

  # Check if postgres service is running
  is_running "postgres"

  # Check if file exists
  if [ ! -f "$project_path/$1" ]; then
    echo "Backup file not found at: "
    echo $project_path/$1
    exit 0
  fi

  # Send backup file to container
  eval "docker cp $project_path/$1 $(eval "$docker_compose ps -q postgres"):/backups/${1##*/}"

  echo "Successfully sent backup from host to container."
  backup list
}

# Restore backup on database
function restore_backup() {
  # Stop all containers
  stop
  eval "$docker_compose up -d --build postgres"
  echo "Waiting for container to fully init..."
  sleep 5

  # Check if postgres service is running
  is_running "postgres"

  # Check if backup exists at container
  exists="$(eval "docker exec $(eval "$docker_compose ps -q postgres") bash -c 'if [ ! -f backups/${1##*/} ]; then echo "not exists"; fi'")"
  if [[ "$exists" == "not exists" ]]; then
    echo "Backup not found at container."
    echo "Sendind backup file..."
    put_backup $1
  fi

  # Running restore at database
  echo "Running restore script"
  eval "$docker_compose exec postgres restore ${1##*/}"

  echo "Finished restore script!"
}

# Create postgres backup
function backup() {
  if [ -z "$1" ]; then
    eval "$docker_compose exec postgres backup"
  else

    # list
    # List all current backups on volume
    if [[ "$1" =~ ^([lL][iI][sS][tT])+$ ]]; then
      eval "$docker_compose exec postgres list-backups"

    # get
    # Get selected backup from container and save into host folder
    elif [[ "$1" =~ ^([gG][eE][tT])+$ ]]; then
      get_backup $2

    # put
    # Get selected backup from host and save into container folder
    elif [[ "$1" =~ ^([pP][uU][tT])+$ ]]; then
      put_backup $2

    # restore
    # Restore selected backup on database
  elif [[ "$1" =~ ^([rR][eE][sS][tT][oO][rR][eE])+$ ]]; then
      restore_backup $2

    else
      echo "Command not found, use --help for usage."
    fi
  fi
}

# Recreate database
function dropdb() {
  echo "This command will drop the database and recreate."
  read -r -p "Are you sure? [y/N] " response
  if [[ "$response" =~ ^([yY][eE][sS]|[yY])+$ ]]; then
    backup
    backup list
    stop
    remove
    remove_volume
  fi
}

if [ "$1" == "-h" ] || [ "$1" == "--help" ] ; then
  echo "$(basename "$0") Docker commands shortcut script. See bellow for usage:

    -h              Show this help text

    start           Start and build containers

    stop            Stop running containers

    restart         Restart current running containers

    remove          Remove all project containers

    logs            Show container logs
       <svc>         Show especific logs for service as <svc>

    ps              Display containers status for project

    backup          Create a database backup
       list         List current backups
       get <fl>     Get backup with name <fl> from container and put in
                      project_base/backups/<fl>.sql.tgz
       put <fl>     Send <fl> as file path from host to the /backups/ folder
                      inside the container
       restore <fl> Restore database using <fl> backup file

    dropdb          Stop and remove all containers of the project and after
                      remove the database volume
"
  exit 0
else
  $@
fi
